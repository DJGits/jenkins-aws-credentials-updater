import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl
import jenkins.model.Jenkins

def awsRegion="us-east-1"

def updateCredentials(String jenkinsId) {
    def newAccessKey = null
    def IAMUser = null
    try {
            def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
                com.cloudbees.jenkins.plugins.awscredentials.BaseAmazonWebServicesCredentials.class,
                jenkins.model.Jenkins.instance
            )

            def awsKey
            for (com.cloudbees.jenkins.plugins.awscredentials.BaseAmazonWebServicesCredentials crd : creds) {      
                if ( crd.getId() == jenkinsId ) {
                    awsKey = crd
                }
            }

            if (awsKey) {
                println "found jenkins credentials : ${awsKey.id} ${awsKey.description}"    
            } else {
                error "Unable to proceed, couldn't able to find the provided credentials ID ${jenkinsId}"            
            }
            IAMUser = validateAccessKey(jenkinsId)
    
            def newKeys = null
            withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: jenkinsId]]) {
                newKeys = sh returnStdout: true, script: "aws iam create-access-key --region us-east-1"
            }
            def newKeysJSON = readJSON (text: newKeys)
            newAccessKey = newKeysJSON.AccessKey.AccessKeyId
            def newSecretKey = newKeysJSON.AccessKey.SecretAccessKey
            
            // I have to delete and then update :( 
            deleteAccessKey(jenkinsId, awsKey.accessKey, IAMUser) 

            //updateAccessKey(credsObject, new-access-key, new-secret-key)            
            updateAccessKey(awsKey, newAccessKey, newSecretKey)
            
            //println IAMUser
    } catch(Exception ex) {
            println 'Something failed, only God can save!'
            println ex
            if (newAccessKey) {
                println "Delete the new key if it was generated"
                deleteAccessKey(jenkinsId, newAccessKey, IAMUser)
            }
            throw ex
    }
}

def validateAccessKey(String credsId) {
    def IAMUser = null
    withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: credsId]]) {
        IAMUser = sh returnStdout: true, script: "aws iam get-user --query \"User.UserName\" --output text --region us-east-1"
    }

    withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: credsId]]) {
        def numberOfKeys = sh returnStdout: true, script: "aws iam list-access-keys --query \"length(AccessKeyMetadata[])\" --region us-east-1 --user-name ${IAMUser}"
        println numberOfKeys
        if ( numberOfKeys.toInteger() > 1 ) {
            error "Unable to proceed, there are more than 1 keys exists for the user ${IAMUser}"
        }
    }
    return IAMUser
}

def deleteAccessKey(String credsId, String accessKey, String IAMUser) {    
    withCredentials([[ $class: 'AmazonWebServicesCredentialsBinding', credentialsId: credsId]]) {
        def result = sh returnStdout: true, script: "aws iam delete-access-key --region us-east-1 --access-key-id $accessKey --user-name ${IAMUser}"        
        println result
    }
    println "Deleted Access Key ${accessKey} for the user ${IAMUser}"
}

def updateAccessKey(com.cloudbees.jenkins.plugins.awscredentials.BaseAmazonWebServicesCredentials updateCreds, String new_access_key, String new_secret_key) {
    if ( updateCreds ) {
        def credentials_store = jenkins.model.Jenkins.instance.getExtensionList(
        		'com.cloudbees.plugins.credentials.SystemCredentialsProvider'
        	)[0].getStore()
        
	    def tscope = updateCreds.scope as com.cloudbees.plugins.credentials.CredentialsScope

        def result = credentials_store.updateCredentials(
        		com.cloudbees.plugins.credentials.domains.Domain.global(),
           		updateCreds,
           		new com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl(tscope, updateCreds.id, new_access_key, new_secret_key, updateCreds.description, null, null)
        	)

        if (result) {
            println "aws credentials changed for id: ${updateCreds.id}"
        } else {
            println "failed to change aws credentials for id: ${updateCreds.id}"
        }
    } else {
      error "could not find credential for id: ${updateCreds.id}"
    }
}

pipeline {
    agent any
    stages {
        stage('FunctionDemo') {
            steps{
                    updateCredentials "${params.JenkinsCredentialsID}"
                }
            }
    }
}